# vim: set filetype=sh :

##################################################
# ~/.bashrc_functions
##################################################

# Python virtual environment activate
activate() {
	env_names=(env venv)
	activate_path="bin/activate"
	for env_name in "${env_names[@]}"
	do
		if [ -d ${env_name} ]; then
			source $env_name/$activate_path
			return
		fi
	done
}

# For nnn file manager - cd to directory when quitting with ^g
n ()
{
    # block nesting of nnn in subshells
    if [ -n $NNNLVL ] && [ "${NNNLVL:-0}" -ge 1 ]; then
        echo "nnn is already running"
        return
    fi

    # the default behaviour is to cd on quit (nnn checks if nnn_tmpfile is set)
    # to cd on quit only on ^g, remove the "export" as in:
    #     nnn_tmpfile="${xdg_config_home:-$home/.config}/nnn/.lastd"
    # note: nnn_tmpfile is fixed, should not be modified
    NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"

    # unmask ^q (, ^v etc.) (if required, see `stty -a`) to quit nnn
    # stty start undef
    # stty stop undef
    # stty lwrap undef
    # stty lnext undef

    nnn "$@"

    if [ -f "$NNN_TMPFILE" ]; then
            . "$NNN_TMPFILE"
            rm -f "$NNN_TMPFILE" > /dev/null
    fi
}

# Create a folder and cd into it
mkd () {
    mkdir -p "$@" && cd "$_";
}

# Print a long one-line git log to fill the entire screen.
# The `margin_lines` is set to 2, so that the screen won't scroll
# when the command is executed, for better visibility.
# If your PS1 takes 2 lines, set the margin to 4.
gitlog_screen () {
    screen_height_cmd="tput lines"
    screen_height=`$screen_height_cmd`
    margin_lines=2
    output_lines=$((screen_height-margin_lines))
    gitcmd="git log --oneline -n $output_lines"
    eval $gitcmd
}

# Rbenv invoke
command rbenv rehash 2>/dev/null
rbenv() {
  local command
  command="${1:-}"
  if [ "$#" -gt 0 ]; then
    shift
  fi

  case "$command" in
  rehash|shell)
    eval "$(rbenv "sh-$command" "$@")";;
  *)
    command rbenv "$command" "$@";;
  esac
}
